{"0": {
    "doc": "Articles",
    "title": "Articles",
    "content": " ",
    "url": "/beginners-mindset/articles/",
    "relUrl": "/articles/"
  },"1": {
    "doc": "Books",
    "title": "Books",
    "content": " ",
    "url": "/beginners-mindset/books/",
    "relUrl": "/books/"
  },"2": {
    "doc": "Beginner’s Mindset",
    "title": "Beginner’s Mindset",
    "content": "Here you can explore the notes I took on books I read, talks I have given or watched and the articles I study - recalling them right afterward by creating short summaries – helps a lot in my learning process. Here you’ll find some of those little pieces. Test . | Articles | Books | Talks | Papers | . ",
    "url": "/beginners-mindset/",
    "relUrl": "/"
  },"3": {
    "doc": "Papers",
    "title": "Papers",
    "content": " ",
    "url": "/beginners-mindset/papers/",
    "relUrl": "/papers/"
  },"4": {
    "doc": "Talks",
    "title": "Talks",
    "content": " ",
    "url": "/beginners-mindset/talks/",
    "relUrl": "/talks/"
  },"5": {
    "doc": "Dart Style Guide",
    "title": "Dart Style Guide",
    "content": "# Dart Style Guide ## Table of Contents - [Dart Style Guide](#dart-style-guide) - [Table of Contents](#table-of-contents) - [Introduction](#introduction) - [Guidelines](#guidelines) - [Keep your build functions small](#keep-your-build-functions-small) - [Use trailing commas](#use-trailing-commas) - [Style](#style) - [Be Consistent](#be-consistent) - [Package and File Names](#package-and-file-names) - [Import Aliasing](#import-aliasing) - [Comments](#comments) - [Avoid Empty Else](#avoid-empty-else) - [Declare Return Types](#declare-return-types) ## Introduction Styles are the conventions that govern our code. The term style is a bit of a misnomer, since these conventions cover far more than just source file formatting pedantic handles that for us. The goal of this guide is to manage this complexity by describing in detail the Dos and Don'ts of writing Dart code at Bounce. These rules exist to keep the codebase manageable while still allowing engineers to use Dart language features productively. This guide is created by [Nandan Satheesh]. [Nandan Satheesh]: https://github.com/NandanSatheesh This documents idiomatic conventions in Dart code that we follow at Bounce. A lot of these are general guidelines for Dart, while others extend upon external resources: 1. [Effective Dart](https://dart.dev/guides/language/effective-dart) ## Guidelines ### Keep your build functions small Seperate out widgets as simple functions where ever possible to keep the build function look small in size. ``` Widget build(BuildContext context) => Column( children: [ Row( ... ), Container(... ), Text(....), ] ); ``` ``` Widget getMainRow() => Row(...); final customContainer = Container(...); final titleText = Text(...); Widget build(BuildContext context) => Column( children: [ getMainRow(), customContainer, titleText, ] ); ``` ### Use trailing commas For a neat formatting, it's always recommened to add *trailing commas*. Add a trailing comma at the end of a parameter list in functions, methods, and constructors. ``` Widget build(BuildContext context) => Column( children: [Icon(Icons.add))]); ``` ``` Widget build(BuildContext context) => Column( children: [ Icon(Icons.add), ] ); ``` ## Style ### Be Consistent Few guidelines written in the document may be situational and subjective. Above all else, **be consistent**. Consistent code is easier to maintain, is easier to rationalize, requires less cognitive overhead, and is easier to migrate or update as new conventions emerge or classes of bugs are fixed. Conversely, having multiple disparate or conflicting styles within a single codebase causes maintenance overhead, uncertainty, and cognitive dissonance, all of which can directly contribute to lower velocity, painful code reviews, and bugs. When applying these guidelines to a codebase, it is recommended that changes are made at a package (or larger) level: application at a sub-package level violates the above concern by introducing multiple styles into the same code. ### Package and File Names When naming packages or a dart file, choose a name that is: - All lower-case. No capitals. Use underscores for spaces. - Short and succinct. Remember that the name is identified in full at every call site. - Not plural. For example, `viewmodel`, not `viewmodels`. ### Import Aliasing Import aliasing should be avoided unless there is a direct conflict between imports. ``` import 'package:http/http.dart' as http; ``` ### Comments Use `///` for documentation only, preferably for members and types. Keep it small and simple. ``` // We are getting a name. String get name => ... ; ``` ``` /// Gets [name] string. String get name => ... ; ``` Use `//` for inline comments only if it's necessary. ``` void print(String name) { /* Prints the name. */ print(name); } ``` ``` void print(String name) { // Prints the name. print(name); } ``` ### Avoid Empty Else **AVOID** empty else statements. ``` if (x > y) print(\"1\"); else ; print(\"2\"); ``` ``` if (x > y) print(\"1\"); print(\"2\"); ``` ### Declare Return Types **ALWAYS** declare method return types. ``` _myMethod() => 42; ``` ``` int _myMethod() => 42; ``` ",
    "url": "/beginners-mindset/articles/dart-style-guide/",
    "relUrl": "/articles/dart-style-guide/"
  },"6": {
    "doc": "Pastebin System Design",
    "title": "Pastebin System Design",
    "content": "# Pastebin System Design With Pastebin you can paste the text data in one place and share it with other users across the world with a unique URL. ## Requirements ### Non Functional Requirements - User should be able to share data - text only with a unique URL. - The link should have capabilities like read once only (burn after read) or expiry after first read to expiry after the time specified. - Support syntax highlighting. ### Functional Requirements - The uploaded data should not be lost. - Links should be unique and random. - Highly Available. ### Future Scope - Analytics ## Capacity Estimations - The above system is being designed keeping only text data in mind with size of 1MB. In case of huge amounts of data, Object Stores on Cloud like S3 can be considered. - The System will be a read-heavy system. Assuming 10 reads for 1 write. 10 : 1 Ratio. - Assumptions: Expected Monthly Active users - 10M and Max Paste Size - 1MB ### Traffic Figures Estimation Traffic Figures Estimation - with Read : Write Ratio of 10 : 1 Expected MAU = 10M Expected Requests = 100M Total Read Requests a month = 100M Reads/Month Total ReadRequests per sec = 100M/(30 * 24 * 2600) = 38 read-requests/second Similarly for writes = 3.8 write-requests/second ### Storage Figures Estimation Expecting at-least 1 paste by every user Total Paste = 10M Users X 1MB = 10TB/month Around ~ 120 TB/year Cache Estimation = 20% of read-traffic = 2TB/month ## APIs POST /v1/paste-bin/ Adds paste to the paste-bin GET /v1/paste-bin/{paste-id} Gets the paste from the paste-bin based on the paste-id sent GET /v1/paste-bin/recent-items Gets the recent public pastes ## Database Design User Details Table ``` id userId - PK userName password createdAt updatedAt socialAuthDetails ``` User Pastes Table ``` id pasteId pasteData syntaxHighlight expiryDetails accessTimes pasteName pasteExposure size url userId isActive createdAt updatedAt ``` syntaxHighlight - Highlight can be C, C++, Java etc. which will be handled on the front end side mostly. An enum can be stored here. expiryDetails - This can be an Enum too. There can be cases like burn after read, after 1 min to several days. pasteExposure - Public or Private Pastes. url - This can be the unique short URL generated from KeyGen Service. As the paste data is stored in the database in the current design, a histroy table can also be used to know what were the items in the last save made. This table can be treated as something simialar to access logs. This will be insert only table for reference only. User Paste History ``` id pasteId userId pasteData syntaxHighlight createdAt size ``` ## High Level Design DB for User Details can be any RDBMS (MySQL) DB for User Paste Details can be any NoSQL (MongoDB) If we want to store the object data, cloud object stores like S3 can also be used. KeyGen Server - A seperate entity for creation of unique keys (6-8 character long) for providing unique keys as and when required. Async Cleanup Service - Service to mark paste details isActive as `false` when the expiryDetails conditions are met. (This can also be done with a Scheduler Service for deletion when the time is specific like - 1 day, etc.). Flow when a paste is created and accessed 1. Requests hits the application 2. Generate a unique key from KeyGen Service. 3. Store the data in the DB/ Cloud Object Store and return the unique link. Flow when a paste has to be accessed 1. Request hits the application 2. Find the unique URL from the userPasteDetails table 3. Update the accessTimes and return it back. If the expiryDetails has burn after read - set isActive as false and return the paste details with meta data - syntax highlighting, etc. 4. If the data from DB already has inActive as false, then send nothing found. The Async Cleanup can be run everyday or the Scheduler can be made to run at a specific point of time. ### Caching Caching - 20% of Read Traffic. Redis can be used here. Eviction Policy - LRU ### Load Balancing LB Between Client and Server or Server and DBs or both. Approaches - Round Robin, Least Connections, Network Hashes. ",
    "url": "/beginners-mindset/articles/pastebin-system-design/",
    "relUrl": "/articles/pastebin-system-design/"
  },"7": {
    "doc": "The Little Book of Common Sense Investing",
    "title": "The Little Book of Common Sense Investing",
    "content": "# [The Little Book of Common Sense Investing](https://www.goodreads.com/book/show/171127.The_Little_Book_of_Common_Sense_Investing) - [The Little Book of Common Sense Investing](#the-little-book-of-common-sense-investing) - [Cast Your Lot with Business](#cast-your-lot-with-business) ## Cast Your Lot with Business > When there are multiple solutions to a problem, chose the simplest one. > If the data doesn't prove that the indexing wins, then the data are wrong. Of the 360 equity mutual funds in existence when the first index fund was formed in 1976, only 74 remain. Actively managed funds come and go, but the index fund goes on forever. ",
    "url": "/beginners-mindset/books/the-little-book-of-common-sense-investing/",
    "relUrl": "/books/the-little-book-of-common-sense-investing/"
  },"8": {
    "doc": "Maven 101",
    "title": "Maven 101",
    "content": "# Maven 101 This was a internal talk given by Maven Legends - me, [Keshav Garg](https://www.linkedin.com/in/keshav-garg/) and [Diwakar Moturu](https://www.linkedin.com/in/diwakar-moturu/) in [Uni Cards](https://www.linkedin.com/company/uni-cards/). Special Thanks to [Abhra Dasgupta](https://www.linkedin.com/in/abhra-dasgupta-97987559/) and [Abhishek Gupta](https://www.linkedin.com/in/abhishek-gupta-b566245/) for helping us out in the preparation for the talk and during the talk as well. :) ## Getting Started Maven, In a nutshell, is an attempt to apply patterns to a project's build infrastructure in order to promote comprehension and productivity by providing a clear path in the use of best practices. Maven is essentially a project management and comprehension tool and as such provides a way to help with managing: - Builds - Documentation - Reporting - Dependencies - SCMs - Releases - Distribution ## Introduction to POM A simple `pom.xml` for reference ``` 4.0.0 club.uni offer-engine 1.0.0 offer-engine 11 1.0.54 . club.uni http ${uni-commons.version} ... ``` `pom.xml` contains the Project Object Model (POM) for this project. The POM is the basic unit of work in Maven. In short, the POM contains every important piece of information about your project and is essentially a one-stop-shopping for finding anything related to your project. ### Explanation of Key Elements in the POM project - This is the top-level element in all Maven pom.xml files. modelVersion - This element indicates what version of the object model this POM is using. Current Version being used - `4.0.0`. groupId - This element indicates the unique identifier of the organization or group that created the project. The groupId is one of the key identifiers of a project and is typically based on the fully qualified domain name of your organization. For example `club.uni` is the designated groupId for all projects/plugins at Uni. artifactId - This element indicates the unique base name of the primary artifact being generated by this project. The primary artifact for a project is typically a JAR file. A typical artifact produced by Maven would have the form `-.` like `offer-engine-server-1.0.0.jar` version - This element indicates the version of the artifact generated by the project. This is where Maven helps with version management. Best practices will on the versioning be covered in the guide. name - This element indicates the display name used for the project. This is often used in Maven's generated documentation. url - This element indicates where the project's site can be found. properties - This element contains value placeholders accessible anywhere within a POM. dependencyManagement - Dependency Management allows consolidation and centralizes the management of dependency versions without adding dependencies which are inherited by all children. This is especially useful when you have a set of projects (i.e. more than one) that inherits a common parent. This also helps in controlling the version of the artifacts used. dependencies - This element's children list dependencies which will be used in the project. build - This element handles things like declaring your project's directory structure and managing plugins. distributionManagement - Responsible for distribution of artifacts. This also specifies how a project will be added to a remote artifactory when it is deployed. The username-password authentication required by the distribution management will be taken from settings.xml present in `/Users/{userName}/.m2` ## Best Practices - Any platform/service in Uni will have the following items. - Parent Maven Project - Supporting Maven Modules ## Parent Maven Project The parent should contain all the common set of dependencies to be used across the child modules. Things which this can include are modules, version properties for dependencies, dependency management for child modules, and distribution management configurations. ### Naming Conventions Group Id - `club.uni` Artifact Id - `` Versioning - `x.y.z` No version should have SNAPSHOT at the end. Release versions can be handled with RELEASE tag in the end. ``` club.uni offer-processor pom . 1.0.0 ``` Keep the common properties that can be used across the modules in the parent `pom.xml` ``` UTF-8 . 11 11 11 2.3.5.RELEASE 2.11.3 3.0.0 5.3.2 3.3.3 1.5.2 1.0.40 1.2.2 1.0.9 . 2.0.1.Final . ``` ## Supporting Maven Modules Group Id - `club.uni` (Same as Parent Project) Artifact Id - `` Versioning - `` ``` offer-processor club.uni 1.0.0 . offer-processor-model ``` ### Third Party Dependency Management Use Dependency Management to control the dependency versions in the project. Define the versions required in the parent pom.xml properties and define all the dependencies which call be used in the plugin/child pom.xml ``` io.springfox springfox-boot-starter ${springfox.version} javax.validation validation-api ${javax.validation.version} io.springfox springfox-swagger-ui ${springfox.version} ``` Dependencies in the child `pom.xml` will not require any versioning if it's already defined in the main `pom.xml` ``` club.uni helper ``` ## Other Pieces - Add only the dependencies you need for your project. Use [Maven Helper Plugin](https://plugins.jetbrains.com/plugin/7179-maven-helper) to identify conflicting dependencies. - The dependency your project needs would have been sometimes be fulfilled by an existing one itself. This is where the Dependency Analyser provided by Maven Helper plugin helps. - Add your dependencies with care so that you don’t have to spend your time fixing crashing builds. - Don’t add any dependency in module pom, only declare them in dependency management of parent pom and then use them in whichever module you require. - `log4j-to-slf4j` and `log4j-slf4j-impl` may conflict and your test cases may not run. Exclude one of the packages and refresh the dependencies again. ## References 1. POM Reference Document - [Docs](https://maven.apache.org/pom.html) 2. Maven By Example PDF - [Link](https://github.com/sonatype/maven-example-en) ",
    "url": "/beginners-mindset/talks/maven-101/",
    "relUrl": "/talks/maven-101/"
  }
}
