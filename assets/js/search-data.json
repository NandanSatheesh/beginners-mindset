{"0": {
    "doc": "Articles",
    "title": "Articles",
    "content": " ",
    "url": "/beginners-mindset/articles/",
    "relUrl": "/articles/"
  },"1": {
    "doc": "Books",
    "title": "Books",
    "content": " ",
    "url": "/beginners-mindset/books/",
    "relUrl": "/books/"
  },"2": {
    "doc": "Beginner’s Mindset",
    "title": "Beginner’s Mindset",
    "content": "Here you can explore the notes I took on books I read, talks I have given or watched and the articles I study - recalling them right afterward by creating short summaries – helps a lot in my learning process. Here you’ll find some of those little pieces. Test . | Articles | Books | Talks | Papers | . ",
    "url": "/beginners-mindset/",
    "relUrl": "/"
  },"3": {
    "doc": "Papers",
    "title": "Papers",
    "content": " ",
    "url": "/beginners-mindset/papers/",
    "relUrl": "/papers/"
  },"4": {
    "doc": "Talks",
    "title": "Talks",
    "content": " ",
    "url": "/beginners-mindset/talks/",
    "relUrl": "/talks/"
  },"5": {
    "doc": "API Rate Limiter Design",
    "title": "API Rate Limiter Design",
    "content": "# API Rate Limiter Design Allow a client to send a fixed number of requests in a given time window. If the number of requests in the time window exceeds, then deny the current request. ## Requirements ### Non Functional Requirements - Highly Available. - The system should take minimum time to process and should not increase the wait or loading time for the user. ### Functional Requirements - Should be configurable for plug and play for any client to use. - Should be configurable to accept the number of requests and the time window for the same. ## Algorithms - Fixed Window - 0-100ms, 100-200ms, etc. - Sliding Window - Checks the window from the current time and checks if the request can be processed. ## Low-Level Design - In Memory Solution A basic interface RateLimiter would be created with a function that will accept `clientId` ```java public interface RateLimiter { boolean canAllow(String clientId); } ``` Now this interface can be extended to provide the capabilities required. It can use Fixed Window Algorithm or Sliding Window Algorithm to evict previous entries. A concrete implementation for the same with Sliding Window would look like this. ```java public class BasicSlidingWindowRateLimiter implements RateLimiter { private ConcurrentHashMap> map; private final int TIME_WINDOW = 60000; // 1 minute private final int REQUEST_LIMIT = 5; public BasicSlidingWindowRateLimiter() { this.map = new ConcurrentHashMap(); } @Override public boolean canAllow(String clientId) { long currentTimeInMillis = System.currentTimeMillis(); Queue queue = map.getOrDefault(clientId, new ConcurrentLinkedDeque()); if (queue.isEmpty()) { queue.add(currentTimeInMillis); map.put(clientId, queue); map.put(clientId, queue); return true; } while (!queue.isEmpty() && queue.peek() REQUEST_LIMIT) { return false; } else { queue.add(currentTimeInMillis); map.put(clientId, queue); return true; } } } ``` ### Memory Estimation Queue Memory Approximate Estimation - | Variable | Space Assumed | --- | ----------- | size | 4 bytes | Node first | 4 bytes | Node last | 4 bytes | Total | 12 bytes | HashMap Memory Approximate Estimation for 1 ClientId - | Variable | Space Assumed | --- | ----------- | key (String Reference | 4 bytes | Queue Reference - Assuming 10 Entries at peak for 1 Bucket | 4 bytes | hashCode for Map | 4 bytes | next - Map Property | 4 bytes | hashCode for Map | 4 bytes | loadFactor, initalCapcity and size (Map Properties) | 8 bytes | header (Map Property) | 8 bytes | Total | 32 bytes | Assuming the scale for about 100K active clients - We'll end up with - (Key Reference 4 bytes + Queue Reference 4 bytes + Header for each record 8 bytes + Queue Size of 10 for each Record of approximately 8 bytes) * 100K = 96,00,000 bytes = 9.6MB ## Scaling The above in-memory solution looks great on paper but when it comes to real-world scenarios for example - 100k Requests per Minute with varing traffic and request conditions, it can go out of memory as well. One of the solves for that would be to keep the `HashMap>` structure in a Redis. ### Caching and Sharding The above solution can also be cached and shard based on `clientId`. Consistent Hashing can be used here. Cache Eviction Policy can be LRU. ",
    "url": "/beginners-mindset/articles/api-rate-limiter-design/",
    "relUrl": "/articles/api-rate-limiter-design/"
  },"6": {
    "doc": "Dart Style Guide",
    "title": "Dart Style Guide",
    "content": "# Dart Style Guide ## Table of Contents - [Dart Style Guide](#dart-style-guide) - [Table of Contents](#table-of-contents) - [Introduction](#introduction) - [Guidelines](#guidelines) - [Keep your build functions small](#keep-your-build-functions-small) - [Use trailing commas](#use-trailing-commas) - [Style](#style) - [Be Consistent](#be-consistent) - [Package and File Names](#package-and-file-names) - [Import Aliasing](#import-aliasing) - [Comments](#comments) - [Avoid Empty Else](#avoid-empty-else) - [Declare Return Types](#declare-return-types) ## Introduction Styles are the conventions that govern our code. The term style is a bit of a misnomer, since these conventions cover far more than just source file formatting pedantic handles that for us. The goal of this guide is to manage this complexity by describing in detail the Dos and Don'ts of writing Dart code at Bounce. These rules exist to keep the codebase manageable while still allowing engineers to use Dart language features productively. This guide is created by [Nandan Satheesh]. [Nandan Satheesh]: https://github.com/NandanSatheesh This documents idiomatic conventions in Dart code that we follow at Bounce. A lot of these are general guidelines for Dart, while others extend upon external resources: 1. [Effective Dart](https://dart.dev/guides/language/effective-dart) ## Guidelines ### Keep your build functions small Seperate out widgets as simple functions where ever possible to keep the build function look small in size. ``` Widget build(BuildContext context) => Column( children: [ Row( ... ), Container(... ), Text(....), ] ); ``` ``` Widget getMainRow() => Row(...); final customContainer = Container(...); final titleText = Text(...); Widget build(BuildContext context) => Column( children: [ getMainRow(), customContainer, titleText, ] ); ``` ### Use trailing commas For a neat formatting, it's always recommened to add *trailing commas*. Add a trailing comma at the end of a parameter list in functions, methods, and constructors. ``` Widget build(BuildContext context) => Column( children: [Icon(Icons.add))]); ``` ``` Widget build(BuildContext context) => Column( children: [ Icon(Icons.add), ] ); ``` ## Style ### Be Consistent Few guidelines written in the document may be situational and subjective. Above all else, **be consistent**. Consistent code is easier to maintain, is easier to rationalize, requires less cognitive overhead, and is easier to migrate or update as new conventions emerge or classes of bugs are fixed. Conversely, having multiple disparate or conflicting styles within a single codebase causes maintenance overhead, uncertainty, and cognitive dissonance, all of which can directly contribute to lower velocity, painful code reviews, and bugs. When applying these guidelines to a codebase, it is recommended that changes are made at a package (or larger) level: application at a sub-package level violates the above concern by introducing multiple styles into the same code. ### Package and File Names When naming packages or a dart file, choose a name that is: - All lower-case. No capitals. Use underscores for spaces. - Short and succinct. Remember that the name is identified in full at every call site. - Not plural. For example, `viewmodel`, not `viewmodels`. ### Import Aliasing Import aliasing should be avoided unless there is a direct conflict between imports. ``` import 'package:http/http.dart' as http; ``` ### Comments Use `///` for documentation only, preferably for members and types. Keep it small and simple. ``` // We are getting a name. String get name => ... ; ``` ``` /// Gets [name] string. String get name => ... ; ``` Use `//` for inline comments only if it's necessary. ``` void print(String name) { /* Prints the name. */ print(name); } ``` ``` void print(String name) { // Prints the name. print(name); } ``` ### Avoid Empty Else **AVOID** empty else statements. ``` if (x > y) print(\"1\"); else ; print(\"2\"); ``` ``` if (x > y) print(\"1\"); print(\"2\"); ``` ### Declare Return Types **ALWAYS** declare method return types. ``` _myMethod() => 42; ``` ``` int _myMethod() => 42; ``` ",
    "url": "/beginners-mindset/articles/dart-style-guide/",
    "relUrl": "/articles/dart-style-guide/"
  },"7": {
    "doc": "Decoding Bounce App’s Self Help Screens",
    "title": "Decoding Bounce App’s Self Help Screens",
    "content": "# Decoding Bounce App's Self Help Screens - [ Decoding Self Help Screens in Bounce](#decoding-self-help-screens-in-bounce) - [Requirements ](#requirements) - [Screens - UI](#screens---ui) - [Capacity Estimations](#capacity-estimations) - [APIs](#apis) - [Database Design](#database-design) - [HLD](#hld) Note that this is an attempt to understand the architecture of the backend for the Self Help feature. ## Requirements ### Non Functional Requirements - At the time of development of this feature, Bounce was clocking more than 1.5M rides daily. The number of people who were facing issues with bike were also in a high number. - The Customer Care was unable to solve all the queries as the number of calls were huge in volume. Some had to wait for 10 min to talk to a executive. - On deep dive to the problem, it was found that the number of people who had issues during the ride were more than the number of people who had not started the ride but still had issues. (Ride Booking Flow vs In-Trip Flow). - Solution was to have help options on the screen so that some of the users can unblock themselves on their own without having to call the Customer Care. - - This also meant to keep separate action items for both the ride states. ### Functional Requirements - The Help Screen content should be configurable for both In-Trip States and Ride-Booking Flow and General App as well. - The templates must be configured at the time of development. The content should be added on the fly without having an app release. - Different Call Actions for In-Trip and Ride-Booking to be critical as the call volumnes in In-Trip are bound to be a lot higher than any other. - The action items like Call Us or Email Us can require an app release. But a generic CTA should be there to handle most of the scenarios on app. - Content helpful or not helpful to be tracked from CleverTap for improving the content or scraping the content for something new. - Should be built like a platform which can be used across the app for any new intiatives as well like Bounce Club, Bouce Pool, etc. ### Future Scope - Integration of Service Desk Management Tools for Tracking the Issues. ## Screens - UI ![Screen 1](https://raw.githubusercontent.com/NandanSatheesh/beginners-mindset/master/images/bounce-self-help/bounce-self-help-image-1.jpeg) ![Screen 1](https://raw.githubusercontent.com/NandanSatheesh/beginners-mindset/master/images/bounce-self-help/bounce-self-help-image-2.jpeg) ## Capacity Estimations ### Traffic Estimation This system is going to be read heavy with 99.99% of time as reads and 0.01% times as write. Writes are mostly addition of new help content and actions . Expecpted Daily Active Users - 10M Considering an average of 6 requests for viewing 2 help screen items. Expected Daily Requests - 60M Total API Requests per second = 60000000/86400 = ~700 requests/second ### Storage Estimation Cache Estimation can be - 50% of the read traffic as the data is not bound to change much. Cache Invalidation must also be done when a new item gets added so that new items are served to the users also. ## APIs CRUD APIs for Addition of Help Content Help Section APIs GET `v1/self-help/topics` - This would get the user details from the token. From, that find out what state the user is in - `IN-TRIP` / `BOOKING-CONFIRMED`. - Find the active sectionId from Main Section Items. - Find all the active help topics to show based on the sectionId and the tripState. GET `v1/self-help/topics/content?contentId={contentId}` - This API would serve the data for the given topic from the previous API. ## Database Design Action (CTA) Details Table - Actions can included Call Us / Email Us with specific value. ``` id - PK actionType actionData metaData createdAt updatedAt isActive ``` Content Data Table ``` id - PK title heading description actionId - FK of Action Details Table isActive createdAt updatedAt ``` Main Section Items - The reason for keeping this would be to show if its a Grid View of `m` X `n` or just a horizonatal list view of items. ``` id sectionType sectionDescription orientation tripState - IN-TRIP/BOOKING-CONFIRMED createdAt updatedAt isActive ``` Help Topics - Help Topics ``` id title sectionId - FK of Main Section Items contentId - FK of Content Data Table topicLogo tripState - IN-TRIP/BOOKING-CONFIRMED createdAt updatedAt isActive ``` ## HLD This is a basic application which serves dynamic data. The current appraoch uses MySQL for mapping items. This can be solved with 1-2 documents with MongoDB as well. ### Caching As this application is going to have lot of read traffic and the data doesn't change much. Around 50% of Read Traffic can be cached. Redis can be used here. Eviction Policy - LRU ### Load Balancing LB Between Client and Server or Server and DBs or both. Approaches - Round Robin, Least Connections, Network Hashes. ",
    "url": "/beginners-mindset/articles/decoding-bounce-self-help-screens/",
    "relUrl": "/articles/decoding-bounce-self-help-screens/"
  },"8": {
    "doc": "Pastebin System Design",
    "title": "Pastebin System Design",
    "content": "# Pastebin System Design With Pastebin you can paste the text data in one place and share it with other users across the world with a unique URL. ## Requirements ### Non Functional Requirements - User should be able to share data - text only with a unique URL. - The link should have capabilities like read once only (burn after read) or expiry after first read to expiry after the time specified. - Support syntax highlighting. ### Functional Requirements - The uploaded data should not be lost. - Links should be unique and random. - Highly Available. ### Future Scope - Analytics ## Capacity Estimations - The above system is being designed keeping only text data in mind with size of 1MB. In case of huge amounts of data, Object Stores on Cloud like S3 can be considered. - The System will be a read-heavy system. Assuming 10 reads for 1 write. 10 : 1 Ratio. - Assumptions: Expected Monthly Active users - 10M and Max Paste Size - 1MB ### Traffic Figures Estimation Traffic Figures Estimation - with Read : Write Ratio of 10 : 1 Expected MAU = 10M Expected Requests = 100M Total Read Requests a month = 100M Reads/Month Total ReadRequests per sec = 100M/(30 * 24 * 2600) = 38 read-requests/second Similarly for writes = 3.8 write-requests/second ### Storage Figures Estimation Expecting at-least 1 paste by every user Total Paste = 10M Users X 1MB = 10TB/month Around ~ 120 TB/year Cache Estimation = 20% of read-traffic = 2TB/month ## APIs POST /v1/paste-bin/ Adds paste to the paste-bin GET /v1/paste-bin/{paste-id} Gets the paste from the paste-bin based on the paste-id sent GET /v1/paste-bin/recent-items Gets the recent public pastes ## Database Design User Details Table ``` id userId - PK userName password createdAt updatedAt socialAuthDetails ``` User Pastes Table ``` id pasteId pasteData syntaxHighlight expiryDetails accessTimes pasteName pasteExposure size url userId isActive createdAt updatedAt ``` syntaxHighlight - Highlight can be C, C++, Java etc. which will be handled on the front end side mostly. An enum can be stored here. expiryDetails - This can be an Enum too. There can be cases like burn after read, after 1 min to several days. pasteExposure - Public or Private Pastes. url - This can be the unique short URL generated from KeyGen Service. As the paste data is stored in the database in the current design, a histroy table can also be used to know what were the items in the last save made. This table can be treated as something simialar to access logs. This will be insert only table for reference only. User Paste History ``` id pasteId userId pasteData syntaxHighlight createdAt size ``` ## High Level Design DB for User Details can be any RDBMS (MySQL) DB for User Paste Details can be any NoSQL (MongoDB) If we want to store the object data, cloud object stores like S3 can also be used. KeyGen Server - A seperate entity for creation of unique keys (6-8 character long) for providing unique keys as and when required. Async Cleanup Service - Service to mark paste details isActive as `false` when the expiryDetails conditions are met. (This can also be done with a Scheduler Service for deletion when the time is specific like - 1 day, etc.). Flow when a paste is created and accessed 1. Requests hits the application 2. Generate a unique key from KeyGen Service. 3. Store the data in the DB/ Cloud Object Store and return the unique link. Flow when a paste has to be accessed 1. Request hits the application 2. Find the unique URL from the userPasteDetails table 3. Update the accessTimes and return it back. If the expiryDetails has burn after read - set isActive as false and return the paste details with meta data - syntax highlighting, etc. 4. If the data from DB already has inActive as false, then send nothing found. The Async Cleanup can be run everyday or the Scheduler can be made to run at a specific point of time. ### Caching Caching - 20% of Read Traffic. Redis can be used here. Eviction Policy - LRU ### Load Balancing LB Between Client and Server or Server and DBs or both. Approaches - Round Robin, Least Connections, Network Hashes. ",
    "url": "/beginners-mindset/articles/pastebin-system-design/",
    "relUrl": "/articles/pastebin-system-design/"
  },"9": {
    "doc": "The Four Agreements",
    "title": "The Four Agreements",
    "content": "# [The Four Agreements](https://www.goodreads.com/book/show/6596.The_Four_Agreements) - [The Four Agreements](#the-four-agreements) - [Domestication and the dream of the planet ](#domestication-and-the-dream-of-the-planet) - [The First Agreement](#the-first-agreement) - [The Second Agreement](#the-second-agreement) - [The Third Agreement](#the-third-agreement) - [The Fourth Agreement](#the-fourth-agreement) - [The Toltec Path to Freedom](#the-toltec-path-to-freedom) - [The New Agreement](#the-new-agreement) ## Domestication and the dream of the planet > Attention is the ability we have to discriminate and to focus only on that which we want to perceive. > The only way to store information is by agreement. The outside dream may hook our attention, but if we don't agree, we don't store that information. As soon as we agree, we believe it, and this is called faith. To have faith is to believe unconditionally. *Domestication of humans* - Creation of our belief system. We are constantly taught what is right, what is wrong, what behaviour is acceptable, the whole concept of a man and a women as well. We are domesticated the same way as any other animal for that matter. > The reward feels good, and we keep doing what others want us to do in order to get the reward. With that fear of being punished and that fear of not getting the reward, we start pretending to be what we are not, just to please others, just to be good enough for someone else > The fear of being rejected becomes the fear of not being good enough. Eventually we become someone that we are not. This is because you become the product of the environment you grow in. You pick beliefs from people around you. You'll need a great deal of courage to challenge your own beliefs. Another part of us which takes blame for all these - *The Victim* > True justice is paying once for each mistake and true injustice is paying more than once for each mistake. > If you consider hell as a state of mind, then hell is all around us. When you don't see the truth, check your beliefs. You may be blinded by them in some form. > To be alive is the biggest fear humans have. Death is not the biggest fear we have; our biggest fear is taking the risk to be alive — the risk to be alive and express what we really are. Just being ourself is the biggest fear of humans. During the process of domestication, we create an image of what perfection looks like in our mind and spend the rest of our lives trying to get there. You'll try to please everyone around you as a part of this process. In the end of the process, you become someone who you are not portraying a not so real image to the outside world. After you fail in that process, you reject yourself and judge others to our levels of expectations and they are bound to fail. > But nobody abuses us more than we abuse ourselves. Nobody would have ever abused you more than yourself. If someone abuses you more than you abuse yourself, you walk away from that person. If someone does that less than you abuse yourself, you tend to stay with them and tolerate it. > Our image of perfection is the reason we reject ourselves; it is why we don't accept ourselves the way we are, and why we don't accept others the way they are. ## The First Agreement > Be impeccable with your word. This one's simple yet so powerful. Words are like a two edged sword. With this, you can either create everything around you or destroy eveything around you. Treat your mind like a fertile land, the seeds of thought what you plant today gets translates to the action you do and the words you speak tomorrow. Pick the ones you want to plant and nurish wisely. Some classic examples from history - Hitler - Planted seeds of fear in people and fully achieved mass destruction. > With the impeccability of the word you can transcend the dream of fear and live a different life. You can live in heaven in the middle of thousands of people living in hell because you are immune to that hell. You can attain the kingdom of heaven from this one agreement: *Be impeccable with your word*. ## The Second Agreement > The second agreement is - *don't take anything personally.* > Humans are addicted to suffering at different levels and to different degrees, and we support each other in maintaining these addictions. Humans agree to help each other suffer. If you have the need to be abused, you will find it easy to be abused by others. > Telling yourself the truth about it may hurt, but you don't need to be attached to the pain. Healing is on the way, and it's just a matter of time before things will be better for you. The moment you take things personally, you feel offended and try to defend based on the values what you believe and increase the chances of creating or being in a conflict. Following this will help you break many habits and routines that trap you in hell of suffering. You can break away from the emotional poison what others try to inflict on you. The amount of freedom you get when you break out of this is huge. Then You can be in the middle of hell and still experience inner peace and happiness. You can stay in your state of bliss, and hell will not affect you at all. ## The Third Agreement > The third agreement is - *Don't make assumptions* This sounds simple but one of the hardest to follow. We tend to make assumptions on the facts and things which we don't know and then we tend to *believe* that they are the truth. It's always better to ask questions instead of setting up assumptions on something. And, when we fail, this hits our mind saying - \"You should have known\". Not making assumptions and asking questions promotes clear communication and > We only see what we want to see and hear what we want to hear. We don't perceive things the way they are. > If you don't understand, ask. > Information or an idea is merely the seed in your mind. What will really make the difference is action. ## The Fourth Agreement >There is just one more agreement, but it's the one that allows the other three to become deeply ingrained habits. The fourth agreement is about the action of the first three: *Always do your best.* > Everything is alive and changing all the time, so your best will sometimes be high quality, and other times it will not be as good. When you wake up refreshed and energized in the morning, your best will be better than when you are tired at night. Your best will be different when you are healthy as opposed to sick, or sober as opposed to drunk. Your best will depend on whether you are feeling wonderful and happy, or upset, angry, or jealous. Action is all about living fully. Do your best and don't expect in return. The person who does more will be richly rewarded. Forrest Gump is a good example to support this. > If you do your best always, over and over again, you will become a master of transformation. Practice makes the master. By doing your best you become a master. Everything you have ever learned, you learned through repetition. You learned to write, to drive, and even to walk by repetition. You are a master of speaking your language because you practiced. Action is what makes the difference. ## The Toltec Path to Freedom > Quote > 98 > 100 > 115 > The problem with most people is that they live their lives and never discover that the Judge and the Victim rule their mind, and therefore they don't have a chance to be free. There are three masteries that lead people to become Toltecs. 1. Mastery of Awareness - Be aware of who you are and things around you. 2. Mastery of Transformation - Be free of domestication 3. Mastery of Intent - Make good use of your energy Be free of the parasite in you 1. Attach it head on - Face fears one by one and conquer them. 2. Stop feeding it - Gain control of emotions and stop feeding them with fear. 3. Initiation of the dead - Symbolic of death which kills it without harming it. > Forgiveness is the only way to heal. We can choose to forgive because we feel compassion for ourselves. > You will know you have forgiven someone when you see them and you no longer have an emotional reaction. You will hear the name of the person and you will have no emotional reaction. > The truth is like a scalpel. The truth is painful, because it opens all of the wounds which are covered by lies so that we can be healed. > If we surrender to the angel of death we will be happy forever and ever. Why? Because the angel of death takes the past away in order to make it possible for life to continue. For every moment that is past, the angel of death keeps taking the part that is dead and we keep living in the present. The parasite wants us to carry the past with us and that makes it so heavy to be alive. When we try to live in the past, how can we enjoy the present? When we dream of the future, why must we carry the burden of the past? When are we going to live in the present? That is what the angel of death teaches us to do. ## The New Agreement > But there is really no reason to suffer. The only reason you suffer is because you choose to suffer. If you look at your life you will find many excuses to suffer, but a good reason to suffer you will not find. The same is true for happiness. The only reason you are happy is because you choose to be happy. Happiness is a choice, and so is suffering. > Maybe we cannot escape from the destiny of the human, but we have a choice: to suffer our destiny or to enjoy our destiny. To suffer, or to love and be happy. To live in hell, or to live in heaven. My choice is to live in heaven. What is yours? ",
    "url": "/beginners-mindset/books/the-four-agreements/",
    "relUrl": "/books/the-four-agreements/"
  },"10": {
    "doc": "The Little Book of Common Sense Investing",
    "title": "The Little Book of Common Sense Investing",
    "content": "# [The Little Book of Common Sense Investing](https://www.goodreads.com/book/show/171127.The_Little_Book_of_Common_Sense_Investing) - [The Little Book of Common Sense Investing](#the-little-book-of-common-sense-investing) - [Cast Your Lot with Business](#cast-your-lot-with-business) ## Cast Your Lot with Business > When there are multiple solutions to a problem, chose the simplest one. > If the data doesn't prove that the indexing wins, then the data are wrong. Of the 360 equity mutual funds in existence when the first index fund was formed in 1976, only 74 remain. Actively managed funds come and go, but the index fund goes on forever. ",
    "url": "/beginners-mindset/books/the-little-book-of-common-sense-investing/",
    "relUrl": "/books/the-little-book-of-common-sense-investing/"
  },"11": {
    "doc": "Maven 101",
    "title": "Maven 101",
    "content": "# Maven 101 This was a internal talk given by Maven Legends - me, [Keshav Garg](https://www.linkedin.com/in/keshav-garg/) and [Diwakar Moturu](https://www.linkedin.com/in/diwakar-moturu/) in [Uni Cards](https://www.linkedin.com/company/uni-cards/). Special Thanks to [Abhra Dasgupta](https://www.linkedin.com/in/abhra-dasgupta-97987559/) and [Abhishek Gupta](https://www.linkedin.com/in/abhishek-gupta-b566245/) for helping us out in the preparation for the talk and during the talk as well. :) ## Getting Started Maven, In a nutshell, is an attempt to apply patterns to a project's build infrastructure in order to promote comprehension and productivity by providing a clear path in the use of best practices. Maven is essentially a project management and comprehension tool and as such provides a way to help with managing: - Builds - Documentation - Reporting - Dependencies - SCMs - Releases - Distribution ## Introduction to POM A simple `pom.xml` for reference ``` 4.0.0 club.uni offer-engine 1.0.0 offer-engine 11 1.0.54 . club.uni http ${uni-commons.version} ... ``` `pom.xml` contains the Project Object Model (POM) for this project. The POM is the basic unit of work in Maven. In short, the POM contains every important piece of information about your project and is essentially a one-stop-shopping for finding anything related to your project. ### Explanation of Key Elements in the POM project - This is the top-level element in all Maven pom.xml files. modelVersion - This element indicates what version of the object model this POM is using. Current Version being used - `4.0.0`. groupId - This element indicates the unique identifier of the organization or group that created the project. The groupId is one of the key identifiers of a project and is typically based on the fully qualified domain name of your organization. For example `club.uni` is the designated groupId for all projects/plugins at Uni. artifactId - This element indicates the unique base name of the primary artifact being generated by this project. The primary artifact for a project is typically a JAR file. A typical artifact produced by Maven would have the form `-.` like `offer-engine-server-1.0.0.jar` version - This element indicates the version of the artifact generated by the project. This is where Maven helps with version management. Best practices will on the versioning be covered in the guide. name - This element indicates the display name used for the project. This is often used in Maven's generated documentation. url - This element indicates where the project's site can be found. properties - This element contains value placeholders accessible anywhere within a POM. dependencyManagement - Dependency Management allows consolidation and centralizes the management of dependency versions without adding dependencies which are inherited by all children. This is especially useful when you have a set of projects (i.e. more than one) that inherits a common parent. This also helps in controlling the version of the artifacts used. dependencies - This element's children list dependencies which will be used in the project. build - This element handles things like declaring your project's directory structure and managing plugins. distributionManagement - Responsible for distribution of artifacts. This also specifies how a project will be added to a remote artifactory when it is deployed. The username-password authentication required by the distribution management will be taken from settings.xml present in `/Users/{userName}/.m2` ## Best Practices - Any platform/service in Uni will have the following items. - Parent Maven Project - Supporting Maven Modules ## Parent Maven Project The parent should contain all the common set of dependencies to be used across the child modules. Things which this can include are modules, version properties for dependencies, dependency management for child modules, and distribution management configurations. ### Naming Conventions Group Id - `club.uni` Artifact Id - `` Versioning - `x.y.z` No version should have SNAPSHOT at the end. Release versions can be handled with RELEASE tag in the end. ``` club.uni offer-processor pom . 1.0.0 ``` Keep the common properties that can be used across the modules in the parent `pom.xml` ``` UTF-8 . 11 11 11 2.3.5.RELEASE 2.11.3 3.0.0 5.3.2 3.3.3 1.5.2 1.0.40 1.2.2 1.0.9 . 2.0.1.Final . ``` ## Supporting Maven Modules Group Id - `club.uni` (Same as Parent Project) Artifact Id - `` Versioning - `` ``` offer-processor club.uni 1.0.0 . offer-processor-model ``` ### Third Party Dependency Management Use Dependency Management to control the dependency versions in the project. Define the versions required in the parent pom.xml properties and define all the dependencies which call be used in the plugin/child pom.xml ``` io.springfox springfox-boot-starter ${springfox.version} javax.validation validation-api ${javax.validation.version} io.springfox springfox-swagger-ui ${springfox.version} ``` Dependencies in the child `pom.xml` will not require any versioning if it's already defined in the main `pom.xml` ``` club.uni helper ``` ## Other Pieces - Add only the dependencies you need for your project. Use [Maven Helper Plugin](https://plugins.jetbrains.com/plugin/7179-maven-helper) to identify conflicting dependencies. - The dependency your project needs would have been sometimes be fulfilled by an existing one itself. This is where the Dependency Analyser provided by Maven Helper plugin helps. - Add your dependencies with care so that you don’t have to spend your time fixing crashing builds. - Don’t add any dependency in module pom, only declare them in dependency management of parent pom and then use them in whichever module you require. - `log4j-to-slf4j` and `log4j-slf4j-impl` may conflict and your test cases may not run. Exclude one of the packages and refresh the dependencies again. ## References 1. POM Reference Document - [Docs](https://maven.apache.org/pom.html) 2. Maven By Example PDF - [Link](https://github.com/sonatype/maven-example-en) ",
    "url": "/beginners-mindset/talks/maven-101/",
    "relUrl": "/talks/maven-101/"
  }
}
